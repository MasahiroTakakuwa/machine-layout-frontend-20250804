// src/app/mercury/mercury.component.ts
// üìÑ ƒê√¢y l√† component d√πng ƒë·ªÉ hi·ªÉn th·ªã layout nh√† m√°y Mercury v√† v·ªã tr√≠ c√°c m√°y tr√™n layout

import { Component, OnInit } from '@angular/core';
import { MachineService } from '../services/machine.service';     // üîÅ Import service ƒë·ªÉ g·ªçi API
import { Machine } from '../models/machine.model';                // üì¶ Import ki·ªÉu d·ªØ li·ªáu m√°y
import { HttpClientModule } from '@angular/common/http';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-mercury',
  standalone: true,
  imports: [CommonModule, HttpClientModule], // ‚úÖ th√™m CommonModule
  templateUrl: './mercury.component.html',
  styleUrls: ['./mercury.component.scss']
})
export class MercuryComponent implements OnInit {
  // üß† M·∫£ng l∆∞u danh s√°ch m√°y ƒë∆∞·ª£c l·∫•y t·ª´ API
  machines: Machine[] = [];

  constructor(private machineService: MachineService) {}

  ngOnInit(): void {
    // üì• G·ªçi API khi component kh·ªüi t·∫°o
    this.machineService.getMachines().subscribe({
      next: data => {
        // ‚úÖ Khi g·ªçi API th√†nh c√¥ng, l∆∞u d·ªØ li·ªáu v√†o bi·∫øn machines
        this.machines = data;
      },
      error: err => {
        // ‚ùå N·∫øu c√≥ l·ªói khi g·ªçi API, hi·ªÉn th·ªã trong console
        console.error('L·ªói khi l·∫•y d·ªØ li·ªáu m√°y:', err);
      }
    });
  }

  // üé® H√†m tr·∫£ v·ªÅ m√†u t∆∞∆°ng ·ª©ng v·ªõi tr·∫°ng th√°i m√°y (status)
  getStatusColor(status: number): string {
    switch (status) {
      case 0: return '#ccc';       // STOP: x√°m
      case 1: return '#00c853';    // RUNNING: xanh l√°
      case 2: return '#d50000';    // ERROR: ƒë·ªè
      default: return '#9e9e9e';   // Tr·∫°ng th√°i kh√¥ng x√°c ƒë·ªãnh: x√°m nh·∫°t
    }
  }
}
